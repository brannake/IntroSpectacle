'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* 
                                                                                                                                                                                                                                                                   * restraint: 
                                                                                                                                                                                                                                                                   *   1. common code: import 'xx';
                                                                                                                                                                                                                                                                   *   2. export: export xx from xx, export x, { xx } from 'xx';
                                                                                                                                                                                                                                                                   *   
                                                                                                                                                                                                                                                                   */

exports.default = function (_ref) {
  var t = _ref.types;

  // import common code once in a file
  var hasAddCommonCode = false;

  return {
    visitor: {
      ImportDeclaration: function ImportDeclaration(path) {
        var node = path.node;
        var specifiers = node.specifiers;
        var source = node.source;
        var pkgId = source.value;

        var specs = [];

        if (pkgId !== recharts) {
          return;
        }

        if (!specifiers.filter(t.isImportSpecifier).length) {
          return;
        }

        specifiers.forEach(function (spec) {
          var _spec = spec;
          var local = _spec.local;
          var imported = _spec.imported;
          var localName = local.name;


          var importedPath = recharts;

          if (t.isImportSpecifier(spec)) {
            var importedName = imported.name;


            spec = t.importDefaultSpecifier(t.identifier(localName));

            if (!pkgMap[importedName]) {
              throw new Error('Recharts ' + importedName + ' was not in known modules.');
            }

            importedPath = pkgMap[importedName];
          }

          if (!hasAddCommonCode) {
            hasAddCommonCode = true;
            commonImport.forEach(function (cPath) {
              path.insertBefore(t.importDeclaration([], t.stringLiteral(cPath)));
            });
          }

          path.insertAfter(t.importDeclaration([spec], t.stringLiteral(importedPath)));
        });

        path.remove();
      }
    }
  };
};

var _module2 = require('module');

var _module3 = _interopRequireDefault(_module2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _babylon = require('babylon');

var babylon = _interopRequireWildcard(_babylon);

var _babelTraverse = require('babel-traverse');

var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var recharts = 'recharts';
var rechartsLib = 'recharts/lib';

var _module = new _module3.default();

var rechartsLibPath = _path2.default.dirname(_module3.default._resolveFilename('recharts', _extends({}, _module, {
  paths: _module3.default._nodeModulePaths(process.cwd())
})));
var rechartsPath = _path2.default.join(rechartsLibPath, '..');
var rechartsSrcPath = _path2.default.join(rechartsPath, 'src');
var rechartsSrcIndexPath = _path2.default.join(rechartsSrcPath, 'index.js');
var srcCode = _fs2.default.readFileSync(rechartsSrcIndexPath, 'utf-8');

var srcAst = babylon.parse(srcCode, {
  sourceType: 'module',
  plugins: ["exportExtensions"]
});

function findPath(source) {
  var finalModule = _extends({}, _module, {
    paths: _module3.default._nodeModulePaths(rechartsSrcPath)
  });

  var _Module$_resolveLooku = _module3.default._resolveLookupPaths(source, finalModule);

  var _Module$_resolveLooku2 = _slicedToArray(_Module$_resolveLooku, 2);

  var id = _Module$_resolveLooku2[0];
  var paths = _Module$_resolveLooku2[1];

  var finalPaths = [].concat(_toConsumableArray(paths), [rechartsSrcPath]);

  var absPath = _module3.default._findPath(source, finalPaths);

  if (absPath.indexOf(_path2.default.join(rechartsPath, 'node_modules')) >= 0) {
    // node_modules source
    return source;
  }

  return 'recharts/lib/' + _path2.default.relative(rechartsSrcPath, absPath);
}

var pkgMap = {};
var commonImport = [];

(0, _babelTraverse2.default)(srcAst, {
  ImportDeclaration: function ImportDeclaration(path) {
    var _path$node = path.node;
    var source = _path$node.source;
    var specifiers = _path$node.specifiers;


    if (!specifiers.length) {
      // get common import like import 'polyfill'
      commonImport = [].concat(_toConsumableArray(commonImport), [source.value]);
    }
  },
  ExportNamedDeclaration: function ExportNamedDeclaration(path) {
    var _path$node2 = path.node;
    var source = _path$node2.source;
    var specifiers = _path$node2.specifiers;


    specifiers.forEach(function (spec) {
      var exported = spec.exported;
      var local = spec.local;


      if (t.isExportDefaultSpecifier(spec)) {
        pkgMap = _extends({}, pkgMap, _defineProperty({}, exported.name, source.value));
      } else {
        pkgMap = _extends({}, pkgMap, _defineProperty({}, exported.name, [source.value, local.name]));
      }
    });
  }
});

Object.keys(pkgMap).forEach(function (key) {
  var pkgMapVal = pkgMap[key];

  if (Array.isArray(pkgMapVal)) {
    var source = findPath(pkgMapVal[0]);

    pkgMap[key] = [source].concat(_toConsumableArray(pkgMap.slice(1)));
  }

  pkgMap[key] = findPath(pkgMapVal);
});

commonImport = commonImport.map(function (source) {
  return findPath(source);
});